M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se)) # 1.035868
Weight_OR_unst <- c("Unstabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep="")) # "0.5777 (0.0759, 4.3998)"
Weight_OR_unst
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw <- c("Stabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
Weight_OR_ipw
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_r)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance   #1.033726
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw_r <- c("Stabilized Weights by trimming",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
Weight_OR_ipw_r
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = tipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance  #1.035867
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_tipw <- c("Stabilized Weights at Truncated 99%",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#""0.5302 (0.0707, 3.9764)"
Weight_OR_tipw
setwd("U:/Documents/Loan Robinson/Aflura data-cut 24Aug2017")
load("ipw_data.RData", ipw <- new.env()) # Need this to get GroupExpTri variable
data <- ipw$data
data <- filter(data, brthout=="livebirth" & twin=="No")
# Confounder list for SGA
con <- read.csv("Confounders/Conf_BirthSGA.csv",stringsAsFactors = F)
confounders <- con$Confounder
table(data$bwpct, data$trm3, useNA = "ifany")
# filter data
data <- data[, names(data) %in% c("preg_id","trm3","bwpct",confounders)]
data <- filter(data, trm3 %in% c("Comparison","3rd"))
data$trm3 <- factor(data$trm3, levels = c("Comparison","3rd"))
data$group <- as.numeric(data$trm3)-1
table(data$bwpct, data$group, useNA = "ifany")
confounders <- c( "edugrp","alc_pc", "tob_pc", "antidep_pc", "pred_pc","agegroup", "GA_Enr","grgrp","agegroup","ivf", "vit_timing1", "influenza0_pc")
fit.all <- formula(paste('group', paste(confounders, collapse = '+'), sep= ' ~ '))
ps_model <- ps(fit.all, data = data[,c("group",confounders)], stop.method = 'es.mean',  estimand = "ATE", verbose = FALSE)
str(ps_model)
data$p <- ps_model$ps$es.mean.ATE # probability
ps_model1 <- ps_model
s <- summary(ps_model1)
s[1:2,c(3:7,9)] <- round(s[1:2,c(3:7,9)],4)
# plot SMD
cb <- bal.table(ps_model)
unw <- cb$unw$std.eff.sz
weighted <-cb$es.mean.ATE$std.eff.sz
t <- data.frame(unw, weighted); rownames(t)<- as.character(rownames(cb$unw));  colnames(t) <-c('Unadjusted', 'Weighted')
t <- t[complete.cases(t),]
write.csv(t, "bwpct_3rd_con2.csv")
data_name = 'bwpct_3rd_con2'
value = 0
table1_1 <- read.csv("bwpct_3rd_con2.csv")
data_name <- as.character(data_name)
save_name <- as.character(paste0("U:/Documents/Loan Robinson/Aflura data-cut 24Aug2017/",sub('\\..*', '',data_name),".png"))
value<- as.integer(value)
table1_1 <- table1_1[order(table1_1$Unadjusted),]
table1_1 <- table1_1[!(is.na(table1_1$Unadjusted) & is.na(table1_1$Weighted)),]#add this row 03212017
table1_1new <- melt(table1_1, id="X")
table1_1new1 <- subset(table1_1new ,table1_1new$variable=="Weighted")
table1_1new1$name1 <- rep(1:nrow(table1_1))
table1_1new2 <- subset(table1_1new ,table1_1new$variable=="Unadjusted")
table1_1new2$name1 <- rep(1:nrow(table1_1))
d <- rbind(table1_1new1,table1_1new2)
d$name1 <- factor(d$name1,levels =c(1:nrow(table1_1)),labels = table1_1new1$X)
d$SMD <- d$variable
d$name1x = str_wrap(d$name1, width = 60) # wrap string
min <- round(ifelse( min(d$value, na.rm = TRUE) <= -1, min(d$value,na.rm = TRUE), -1),1)
max <- round(ifelse( max(d$value,na.rm = TRUE) >= 1, max(d$value,na.rm = TRUE), 1),1)
min1 <- min-0.1
max1 <- max+0.1
text_size = ifelse(min <= -2,7,14)
axis.text.y.size1 = ifelse(min <= -2,11,14)
axis.text.y.size = ifelse(min <= -2,6,8)
colorname <- c("dark blue","dark red")
# UNSTABILIZING the IPTW weights
data$ipw_unsta <- ifelse(data$group==1,1/data$p,1/(1-data$p)) # unstablized weigths
# STABILIZING the IPTW weights
data$ipw <- mean(data$group)*data$group/data$p + (1-mean(data$group))*(1-data$group)/(1-data$p) # stablized weigths
#data$ipw_sta <- ifelse(data$group==1,mean(data$group)/data$p,(1 - mean(data$group))/(1-data$p)) # stablized weigths
#truncated weights 99
data$tipw  <- ifelse(data$ipw < quantile(data$ipw , probs=0.01,na.rm = TRUE), quantile(data$ipw , probs=0.01,na.rm = TRUE), data$ipw )
data$tipw  <- ifelse(data$ipw  > quantile(data$ipw , probs=.99,na.rm = TRUE), quantile(data$ipw , probs=.99,na.rm = TRUE), data$tipw)
# TRIMMING the stabilized IPTW weights
data$ipw_r <- data$ipw
data$ipw_r <- pmax(data$ipw_r, 0.1)
data$ipw_r <- pmin(data$ipw_r,10)
unst <- sum_ps(data1,"ipw_unsta","Unstabilized Weights")
stab <- sum_ps(data1,"ipw","Stabilized Weights")
stab_truncated <- sum_ps(data1,"tipw","Stabilized Weights at Truncated 99%")
stab_trim <- sum_ps(data1,"ipw_r","Stabilized Weights by trimming")
fi <- do.call("rbind", list(unst, stab,stab_trim,stab_truncated))
#write.csv(fi, "summary_ps.csv")
fi
data <- data.frame(data)
data$group <- as.numeric(data$trm3)-1
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_unsta)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se)) # 1.035868
Weight_OR_unst <- c("Unstabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep="")) # "0.5777 (0.0759, 4.3998)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw <- c("Stabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_r)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance   #1.033726
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw_r <- c("Stabilized Weights by trimming",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = tipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance  #1.035867
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_tipw <- c("Stabilized Weights at Truncated 99%",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#""0.5302 (0.0707, 3.9764)"
result <- data.frame(rbind(Weight_OR_unst,Weight_OR_ipw,Weight_OR_ipw_r ,Weight_OR_tipw))
names(result) <- c("Method","SE", "Weighted OR (95% CI)")
result
data2 <- data1[order(data1$ipw, decreasing =TRUE),c("preg_id","trm3","p","ipw_unsta","ipw","ipw_r","tipw")]
names(data2) <- c("preg id","group","probability","unstabilized","stabilized","trimming","truncated 99%")
data2[,c(3:7)] <- lapply(data2[,c(3:7)], function(i) round(i, 5))
data3 <- data2[c(1:10),]
data3
cb <- bal.table(ps_model)
unw <- cb$unw$std.eff.sz
weighted <-cb$es.mean.ATE$std.eff.sz
t <- data.frame(unw, weighted); rownames(t)<- as.character(rownames(cb$unw));  colnames(t) <-c('Unadjusted', 'Weighted')
t <- t[complete.cases(t),]
write.csv(t, "bwpct_3rd_con2.csv")
data_name = 'bwpct_3rd_con2'
value = 0
table1_1 <- read.csv("bwpct_3rd_con2.csv")
data_name <- as.character(data_name)
save_name <- as.character(paste0("U:/Documents/Loan Robinson/Aflura data-cut 24Aug2017/",sub('\\..*', '',data_name),".png"))
value<- as.integer(value)
table1_1 <- table1_1[order(table1_1$Unadjusted),]
table1_1 <- table1_1[!(is.na(table1_1$Unadjusted) & is.na(table1_1$Weighted)),]#add this row 03212017
table1_1new <- melt(table1_1, id="X")
table1_1new1 <- subset(table1_1new ,table1_1new$variable=="Weighted")
table1_1new1$name1 <- rep(1:nrow(table1_1))
table1_1new2 <- subset(table1_1new ,table1_1new$variable=="Unadjusted")
table1_1new2$name1 <- rep(1:nrow(table1_1))
d <- rbind(table1_1new1,table1_1new2)
d$name1 <- factor(d$name1,levels =c(1:nrow(table1_1)),labels = table1_1new1$X)
d$SMD <- d$variable
d$name1x = str_wrap(d$name1, width = 60) # wrap string
min <- round(ifelse( min(d$value, na.rm = TRUE) <= -1, min(d$value,na.rm = TRUE), -1),1)
max <- round(ifelse( max(d$value,na.rm = TRUE) >= 1, max(d$value,na.rm = TRUE), 1),1)
min1 <- min-0.1
max1 <- max+0.1
text_size = ifelse(min <= -2,7,14)
axis.text.y.size1 = ifelse(min <= -2,11,14)
axis.text.y.size = ifelse(min <= -2,6,8)
colorname <- c("dark blue","dark red")
ggplot(data=d,aes(x=value,y=name1,group=SMD,color=SMD))+
scale_fill_manual(values=colorname) +
scale_colour_manual(values=colorname) +  # I ADDED THIS LINE
geom_point(size=2)+
geom_path(aes(linetype = SMD),size=0.5)+
scale_linetype_manual(values=c("solid","dashed"))+
#geom_vline(xintercept = c(-0.1,0,0.1),color="black",size=c(0.6,0.2,0.6))+
geom_vline(xintercept = c(-0.2,0.2),color="black",size=c(0.4,0.4))+
theme_bw()+theme(axis.text = element_text(colour = "black"),legend.position = c(.9, .15),axis.text.x = element_text(size=text_size),axis.text.y = element_text(angle = 15, hjust = 1,size=axis.text.y.size1))+
scale_y_discrete(labels = function(x) str_wrap(x, width = 20))+ggtitle("Standardized Mean Difference before and after Adjustment Where \nPropensity Score Was Utilized of data with missing values")+
scale_x_continuous(name="SMD",limits=c(min1,max1),breaks=c(min,-1,-0.5,-0.2,0,0.2,0.5,max))+labs(y="Variable")+ggsave(save_name, height=7, width=8.5, units='in', dpi=800)
setwd("U:/Documents/Loan Robinson/Aflura data-cut 24Aug2017")
load("ipw_data.RData", ipw <- new.env()) # Need this to get GroupExpTri variable
data <- ipw$data
data <- filter(data, brthout=="livebirth" & twin=="No")
# Confounder list for SGA
con <- read.csv("Confounders/Conf_BirthSGA.csv",stringsAsFactors = F)
confounders <- con$Confounder
table(data$bwpct, data$trm3, useNA = "ifany")
# filter data
data <- data[, names(data) %in% c("preg_id","trm3","bwpct",confounders)]
data <- filter(data, trm3 %in% c("Comparison","3rd"))
data$trm3 <- factor(data$trm3, levels = c("Comparison","3rd"))
data$group <- as.numeric(data$trm3)-1
table(data$bwpct, data$group, useNA = "ifany")
confounders <- c( "edugrp","alc_pc", "tob_pc", "antidep_pc", "pred_pc","agegroup", "GA_Enr","grgrp","agegroup","ivf", "influenza0_pc")
fit.all <- formula(paste('group', paste(confounders, collapse = '+'), sep= ' ~ '))
ps_model <- ps(fit.all, data = data[,c("group",confounders)], stop.method = 'es.mean',  estimand = "ATE", verbose = FALSE)
str(ps_model)
data$p <- ps_model$ps$es.mean.ATE # probability
ps_model1 <- ps_model
s <- summary(ps_model1)
s[1:2,c(3:7,9)] <- round(s[1:2,c(3:7,9)],4)
# plot SMD
cb <- bal.table(ps_model)
unw <- cb$unw$std.eff.sz
weighted <-cb$es.mean.ATE$std.eff.sz
t <- data.frame(unw, weighted); rownames(t)<- as.character(rownames(cb$unw));  colnames(t) <-c('Unadjusted', 'Weighted')
t <- t[complete.cases(t),]
write.csv(t, "bwpct_3rd_con2.csv")
data_name = 'bwpct_3rd_con2'
value = 0
table1_1 <- read.csv("bwpct_3rd_con2.csv")
data_name <- as.character(data_name)
save_name <- as.character(paste0("U:/Documents/Loan Robinson/Aflura data-cut 24Aug2017/",sub('\\..*', '',data_name),".png"))
value<- as.integer(value)
table1_1 <- table1_1[order(table1_1$Unadjusted),]
table1_1 <- table1_1[!(is.na(table1_1$Unadjusted) & is.na(table1_1$Weighted)),]#add this row 03212017
table1_1new <- melt(table1_1, id="X")
table1_1new1 <- subset(table1_1new ,table1_1new$variable=="Weighted")
table1_1new1$name1 <- rep(1:nrow(table1_1))
table1_1new2 <- subset(table1_1new ,table1_1new$variable=="Unadjusted")
table1_1new2$name1 <- rep(1:nrow(table1_1))
d <- rbind(table1_1new1,table1_1new2)
d$name1 <- factor(d$name1,levels =c(1:nrow(table1_1)),labels = table1_1new1$X)
d$SMD <- d$variable
d$name1x = str_wrap(d$name1, width = 60) # wrap string
min <- round(ifelse( min(d$value, na.rm = TRUE) <= -1, min(d$value,na.rm = TRUE), -1),1)
max <- round(ifelse( max(d$value,na.rm = TRUE) >= 1, max(d$value,na.rm = TRUE), 1),1)
min1 <- min-0.1
max1 <- max+0.1
text_size = ifelse(min <= -2,7,14)
axis.text.y.size1 = ifelse(min <= -2,11,14)
axis.text.y.size = ifelse(min <= -2,6,8)
colorname <- c("dark blue","dark red")
ggplot(data=d,aes(x=value,y=name1,group=SMD,color=SMD))+
scale_fill_manual(values=colorname) +
scale_colour_manual(values=colorname) +  # I ADDED THIS LINE
geom_point(size=2)+
geom_path(aes(linetype = SMD),size=0.5)+
scale_linetype_manual(values=c("solid","dashed"))+
#geom_vline(xintercept = c(-0.1,0,0.1),color="black",size=c(0.6,0.2,0.6))+
geom_vline(xintercept = c(-0.2,0.2),color="black",size=c(0.4,0.4))+
theme_bw()+theme(axis.text = element_text(colour = "black"),legend.position = c(.9, .15),axis.text.x = element_text(size=text_size),axis.text.y = element_text(angle = 15, hjust = 1,size=axis.text.y.size1))+
scale_y_discrete(labels = function(x) str_wrap(x, width = 20))+ggtitle("Standardized Mean Difference before and after Adjustment Where \nPropensity Score Was Utilized of data with missing values")+
scale_x_continuous(name="SMD",limits=c(min1,max1),breaks=c(min,-1,-0.5,-0.2,0,0.2,0.5,max))+labs(y="Variable")+ggsave(save_name, height=7, width=8.5, units='in', dpi=800)
ggplot(data=d,aes(x=value,y=name1,group=SMD,color=SMD))+
scale_fill_manual(values=colorname) +
scale_colour_manual(values=colorname) +  # I ADDED THIS LINE
geom_point(size=2)+
geom_path(aes(linetype = SMD),size=0.5)+
scale_linetype_manual(values=c("solid","dashed"))+
#geom_vline(xintercept = c(-0.1,0,0.1),color="black",size=c(0.6,0.2,0.6))+
geom_vline(xintercept = c(-0.2,0.2),color="black",size=c(0.4,0.4))+
theme_bw()+theme(axis.text = element_text(colour = "black"),legend.position = c(.9, .15),axis.text.x = element_text(size=text_size),axis.text.y = element_text(angle = 15, hjust = 1,size=axis.text.y.size1))+
scale_y_discrete(labels = function(x) str_wrap(x, width = 20))+ggtitle("Standardized Mean Difference before and after Adjustment Where \nPropensity Score Was Utilized")+
scale_x_continuous(name="SMD",limits=c(min1,max1),breaks=c(min,-1,-0.5,-0.2,0,0.2,0.5,max))+labs(y="Variable")+ggsave(save_name, height=7, width=8.5, units='in', dpi=800)
unst <- sum_ps(data1,"ipw_unsta","Unstabilized Weights")
stab <- sum_ps(data1,"ipw","Stabilized Weights")
stab_truncated <- sum_ps(data1,"tipw","Stabilized Weights at Truncated 99%")
stab_trim <- sum_ps(data1,"ipw_r","Stabilized Weights by trimming")
fi <- do.call("rbind", list(unst, stab,stab_trim,stab_truncated))
#write.csv(fi, "summary_ps.csv")
fi
data$group <- as.numeric(data$trm3)-1
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_unsta)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se)) # 1.035868
Weight_OR_unst <- c("Unstabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep="")) # "0.5777 (0.0759, 4.3998)"
data <- data.frame(data)
data$group <- as.numeric(data$trm3)-1
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_unsta)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se)) # 1.035868
Weight_OR_unst <- c("Unstabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep="")) # "0.5777 (0.0759, 4.3998)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw <- c("Stabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_r)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance   #1.033726
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw_r <- c("Stabilized Weights by trimming",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = tipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance  #1.035867
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_tipw <- c("Stabilized Weights at Truncated 99%",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#""0.5302 (0.0707, 3.9764)"
# UNSTABILIZING the IPTW weights
data$ipw_unsta <- ifelse(data$group==1,1/data$p,1/(1-data$p)) # unstablized weigths
# STABILIZING the IPTW weights
data$ipw <- mean(data$group)*data$group/data$p + (1-mean(data$group))*(1-data$group)/(1-data$p) # stablized weigths
#data$ipw_sta <- ifelse(data$group==1,mean(data$group)/data$p,(1 - mean(data$group))/(1-data$p)) # stablized weigths
#truncated weights 99
data$tipw  <- ifelse(data$ipw < quantile(data$ipw , probs=0.01,na.rm = TRUE), quantile(data$ipw , probs=0.01,na.rm = TRUE), data$ipw )
data$tipw  <- ifelse(data$ipw  > quantile(data$ipw , probs=.99,na.rm = TRUE), quantile(data$ipw , probs=.99,na.rm = TRUE), data$tipw)
# TRIMMING the stabilized IPTW weights
data$ipw_r <- data$ipw
data$ipw_r <- pmax(data$ipw_r, 0.1)
data$ipw_r <- pmin(data$ipw_r,10)
#Another alternative to address the problems that can arise with very large weights is to use trimmed or truncated weights, in which weights that exceed a specified threshold are each set to that threshold [16, 17]. The threshold is often based on quantiles of the distribution of the weights (e.g., the 1st and 99th percentiles).
#trimming to minimize the influence of a few remaining outlier weights
mean(data$ipw)
mean(data$ipw_unsta)
mean(data$tipw )
mean(data$ipw_r )
sd(data$ipw)
sd(data$ipw_unsta)
sd(data$tipw )
sd(data$ipw_r )
range(data$ipw)
range(data$ipw_unsta)
range(data$tipw)
range(data$ipw_r )
data <- data.frame(data)
data$group <- as.numeric(data$trm3)-1
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_unsta)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se)) # 1.035868
Weight_OR_unst <- c("Unstabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep="")) # "0.5777 (0.0759, 4.3998)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw <- c("Stabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_r)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance   #1.033726
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw_r <- c("Stabilized Weights by trimming",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = tipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance  #1.035867
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_tipw <- c("Stabilized Weights at Truncated 99%",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#""0.5302 (0.0707, 3.9764)"
result <- data.frame(rbind(Weight_OR_unst,Weight_OR_ipw,Weight_OR_ipw_r ,Weight_OR_tipw))
names(result) <- c("Method","SE", "Weighted OR (95% CI)")
result
setwd("U:/Documents/Loan Robinson/Aflura data-cut 24Aug2017")
load("ipw_data.RData", ipw <- new.env()) # Need this to get GroupExpTri variable
data <- ipw$data
data <- filter(data, brthout=="livebirth" & twin=="No")
# Confounder list for SGA
con <- read.csv("Confounders/Conf_BirthSGA.csv",stringsAsFactors = F)
confounders <- con$Confounder
table(data$bwpct, data$trm3, useNA = "ifany")
# filter data
data <- data[, names(data) %in% c("preg_id","trm3","bwpct",confounders)]
data <- filter(data, trm3 %in% c("Comparison","3rd"))
data$trm3 <- factor(data$trm3, levels = c("Comparison","3rd"))
data$group <- as.numeric(data$trm3)-1
table(data$bwpct, data$group, useNA = "ifany")
confounders <- c( "edugrp","alc_pc", "tob_pc", "antidep_pc", "pred_pc","agegroup", "GA_Enr","grgrp","agegroup","ivf", "influenza0_pc","Other.Psych", "pre.hyper","AI", "preec")
fit.all <- formula(paste('group', paste(confounders, collapse = '+'), sep= ' ~ '))
ps_model <- ps(fit.all, data = data[,c("group",confounders)], stop.method = 'es.mean',  estimand = "ATE", verbose = FALSE)
str(ps_model)
data$p <- ps_model$ps$es.mean.ATE # probability
ps_model1 <- ps_model
s <- summary(ps_model1)
s[1:2,c(3:7,9)] <- round(s[1:2,c(3:7,9)],4)
# plot SMD
cb <- bal.table(ps_model)
unw <- cb$unw$std.eff.sz
weighted <-cb$es.mean.ATE$std.eff.sz
t <- data.frame(unw, weighted); rownames(t)<- as.character(rownames(cb$unw));  colnames(t) <-c('Unadjusted', 'Weighted')
t <- t[complete.cases(t),]
write.csv(t, "bwpct_3rd_con2.csv")
data_name = 'bwpct_3rd_con2'
value = 0
table1_1 <- read.csv("bwpct_3rd_con2.csv")
data_name <- as.character(data_name)
save_name <- as.character(paste0("U:/Documents/Loan Robinson/Aflura data-cut 24Aug2017/",sub('\\..*', '',data_name),".png"))
value<- as.integer(value)
table1_1 <- table1_1[order(table1_1$Unadjusted),]
table1_1 <- table1_1[!(is.na(table1_1$Unadjusted) & is.na(table1_1$Weighted)),]#add this row 03212017
table1_1new <- melt(table1_1, id="X")
table1_1new1 <- subset(table1_1new ,table1_1new$variable=="Weighted")
table1_1new1$name1 <- rep(1:nrow(table1_1))
table1_1new2 <- subset(table1_1new ,table1_1new$variable=="Unadjusted")
table1_1new2$name1 <- rep(1:nrow(table1_1))
d <- rbind(table1_1new1,table1_1new2)
d$name1 <- factor(d$name1,levels =c(1:nrow(table1_1)),labels = table1_1new1$X)
d$SMD <- d$variable
d$name1x = str_wrap(d$name1, width = 60) # wrap string
min <- round(ifelse( min(d$value, na.rm = TRUE) <= -1, min(d$value,na.rm = TRUE), -1),1)
max <- round(ifelse( max(d$value,na.rm = TRUE) >= 1, max(d$value,na.rm = TRUE), 1),1)
min1 <- min-0.1
max1 <- max+0.1
text_size = ifelse(min <= -2,7,14)
axis.text.y.size1 = ifelse(min <= -2,11,14)
axis.text.y.size = ifelse(min <= -2,6,8)
colorname <- c("dark blue","dark red")
ggplot(data=d,aes(x=value,y=name1,group=SMD,color=SMD))+
scale_fill_manual(values=colorname) +
scale_colour_manual(values=colorname) +  # I ADDED THIS LINE
geom_point(size=2)+
geom_path(aes(linetype = SMD),size=0.5)+
scale_linetype_manual(values=c("solid","dashed"))+
#geom_vline(xintercept = c(-0.1,0,0.1),color="black",size=c(0.6,0.2,0.6))+
geom_vline(xintercept = c(-0.2,0.2),color="black",size=c(0.4,0.4))+
theme_bw()+theme(axis.text = element_text(colour = "black"),legend.position = c(.9, .15),axis.text.x = element_text(size=text_size),axis.text.y = element_text(angle = 15, hjust = 1,size=axis.text.y.size1))+
scale_y_discrete(labels = function(x) str_wrap(x, width = 20))+ggtitle("Standardized Mean Difference before and after Adjustment Where \nPropensity Score Was Utilized")+
scale_x_continuous(name="SMD",limits=c(min1,max1),breaks=c(min,-1,-0.5,-0.2,0,0.2,0.5,max))+labs(y="Variable")+ggsave(save_name, height=7, width=8.5, units='in', dpi=800)
# UNSTABILIZING the IPTW weights
data$ipw_unsta <- ifelse(data$group==1,1/data$p,1/(1-data$p)) # unstablized weigths
# STABILIZING the IPTW weights
data$ipw <- mean(data$group)*data$group/data$p + (1-mean(data$group))*(1-data$group)/(1-data$p) # stablized weigths
#data$ipw_sta <- ifelse(data$group==1,mean(data$group)/data$p,(1 - mean(data$group))/(1-data$p)) # stablized weigths
#truncated weights 99
data$tipw  <- ifelse(data$ipw < quantile(data$ipw , probs=0.01,na.rm = TRUE), quantile(data$ipw , probs=0.01,na.rm = TRUE), data$ipw )
data$tipw  <- ifelse(data$ipw  > quantile(data$ipw , probs=.99,na.rm = TRUE), quantile(data$ipw , probs=.99,na.rm = TRUE), data$tipw)
# TRIMMING the stabilized IPTW weights
data$ipw_r <- data$ipw
data$ipw_r <- pmax(data$ipw_r, 0.1)
data$ipw_r <- pmin(data$ipw_r,10)
data <- data.frame(data)
data$group <- as.numeric(data$trm3)-1
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_unsta)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se)) # 1.035868
Weight_OR_unst <- c("Unstabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep="")) # "0.5777 (0.0759, 4.3998)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw <- c("Stabilized Weights",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = ipw_r)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance   #1.033726
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_ipw_r <- c("Stabilized Weights by trimming",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#"4.5742 (0.6092, 34.3436)"
data <- data.frame(data)
fitY <- glm(bwpct ~ group, data=data,family='binomial',weights = tipw)
M <- summary(fitY)
OR <- sprintf('%.4f',exp(M$coeff[2,1]))
se <- sandwich(fitY)[2,2]^0.5  # for IPW, use sandwich to estimate variance  #1.035867
Lower.CI <- sprintf('%.4f', exp(M$coeff[2,1]-qnorm(0.975)*se))
Upper.CI <- sprintf('%.4f', exp(M$coeff[2,1]+qnorm(0.975)*se))
Weight_OR_tipw <- c("Stabilized Weights at Truncated 99%",sprintf('%.5f',se),paste0(OR, " (", Lower.CI,", ",Upper.CI,")", sep=""))#""0.5302 (0.0707, 3.9764)"
result <- data.frame(rbind(Weight_OR_unst,Weight_OR_ipw,Weight_OR_ipw_r ,Weight_OR_tipw))
names(result) <- c("Method","SE", "Weighted OR (95% CI)")
result
library(devtools)
library(roxygen2)
library(usethis)
library(testthat)
rm(list=ls())
setwd("U:/Documents")
getwd()
usethis::create_package("./demoGraphic")
rm(list=ls())
setwd("C:/Users/lorobinson")
getwd()
usethis::create_package("./demoGraphic")
t.test.p.value <- function(...) {
obj <- try(t.test(...), silent = TRUE)
if (is(obj, "try-error"))
return(NaN) else return(data.frame(obj$p.value))
t.test.p.value <- function(...) {
obj <- try(t.test(...), silent = TRUE)
if (is(obj, "try-error"))
return(NaN) else return(data.frame(obj$p.value))
}
t.test.p.value(c(1:10),c(11:20))
}
